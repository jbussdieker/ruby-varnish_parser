#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'
module VarnishParser
  class Parser < Racc::Parser

module_eval(<<'...end grammar.ry/module_eval...', 'grammar.ry', 39)

  attr_reader :handler

  def initialize(tokenizer, handler = Handler.new)
    @tokenizer = tokenizer
    @handler   = handler
    super()
  end

  def parse
    do_parse
    handler
  end

  def next_token
    @tokenizer.next_token
  end
...end grammar.ry/module_eval...
##### State transition tables begin ###

racc_action_table = [
     7,     6,     6,    19,    19,     6,    14,     6,     6,     6,
    14,    14,    19,    14,    14,    25,    10,     6,    31 ]

racc_action_check = [
     1,    13,    17,    13,    17,    25,    25,     0,     1,     9,
     9,    21,    21,    15,    12,    20,     7,     5,    29 ]

racc_action_pointer = [
    -1,     0,   nil,   nil,   nil,     9,   nil,    16,   nil,     1,
   nil,   nil,     5,    -7,   nil,     4,   nil,    -6,   nil,   nil,
     4,     2,   nil,   nil,   nil,    -3,   nil,   nil,   nil,     6,
   nil,   nil ]

racc_action_default = [
   -19,   -19,    -2,    -3,    -4,   -19,   -18,   -19,    -1,   -19,
    32,    -5,   -19,   -19,   -13,   -19,    -9,   -19,   -12,   -14,
   -19,   -19,    -8,   -10,   -11,   -19,    -6,    -7,   -15,   -19,
   -17,   -16 ]

racc_goto_table = [
     9,    11,    16,    21,    12,    18,    23,    22,    20,    24,
    26,    15,    20,    27,     2,     8,    17,    30,     1,    28,
    29 ]

racc_goto_check = [
     5,     6,     9,     8,     5,    11,     9,     6,     5,    11,
     9,     7,     5,     6,     2,     2,    10,     6,     1,    12,
     5 ]

racc_goto_pointer = [
   nil,    18,    14,   nil,   nil,    -5,    -8,    -1,   -12,   -11,
     3,    -8,    -6 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,   nil,    13,   nil,   nil,
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 14, :_reduce_none,
  1, 14, :_reduce_none,
  1, 15, :_reduce_none,
  1, 15, :_reduce_none,
  3, 16, :_reduce_none,
  6, 17, :_reduce_none,
  2, 21, :_reduce_none,
  1, 21, :_reduce_none,
  2, 19, :_reduce_none,
  3, 19, :_reduce_none,
  2, 23, :_reduce_none,
  1, 23, :_reduce_none,
  1, 20, :_reduce_13,
  1, 22, :_reduce_14,
  3, 24, :_reduce_none,
  2, 25, :_reduce_none,
  1, 25, :_reduce_none,
  1, 18, :_reduce_18 ]

racc_reduce_n = 19

racc_shift_n = 32

racc_token_table = {
  false => 0,
  :error => 1,
  :EQUAL => 2,
  :BACKEND => 3,
  :DIRECTOR => 4,
  :NAME => 5,
  :TYPE => 6,
  :KEY => 7,
  :STRING => 8,
  "{" => 9,
  "}" => 10,
  "=" => 11,
  ";" => 12 }

racc_nt_base = 13

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "EQUAL",
  "BACKEND",
  "DIRECTOR",
  "NAME",
  "TYPE",
  "KEY",
  "STRING",
  "\"{\"",
  "\"}\"",
  "\"=\"",
  "\";\"",
  "$start",
  "directives",
  "directive",
  "backend",
  "director",
  "string",
  "object",
  "start_object",
  "objects",
  "end_object",
  "pairs",
  "pair",
  "value" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

module_eval(<<'.,.,', 'grammar.ry', 26)
  def _reduce_13(val, _values, result)
     @handler.start_object 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ry', 27)
  def _reduce_14(val, _values, result)
     @handler.end_object 
    result
  end
.,.,

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

module_eval(<<'.,.,', 'grammar.ry', 33)
  def _reduce_18(val, _values, result)
     @handler.scalar val[0].gsub(/^"|"$/, '') 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module VarnishParser
